#include <stdio.h>
#include <string.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "driver/uart.h"
#include "driver/gpio.h"

// UART Configuration
#define UART_NUM UART_NUM_1
#define TXD_PIN GPIO_NUM_17 // Adjust based on wiring
#define RXD_PIN GPIO_NUM_16 // Adjust based on wiring
#define BAUD_RATE 115200
#define BUF_SIZE 1024

// MQTT Broker Information
const char *mqtt_server = "61f18205d9d64ad1b29f6e99d0679efc.s1.eu.hivemq.cloud"; // Public MQTT broker
const char *mqtt_port = "8883";               // MQTT broker port
const char *mqtt_client_id = "s58p8l";
const char *mqtt_topic = "test/topic";
const char *mqtt_message = "Hello from ESP32";

void uart_init()
{
    // Configure UART parameters
    uart_config_t uart_config = {
        .baud_rate = BAUD_RATE,
        .data_bits = UART_DATA_8_BITS,
        .parity = UART_PARITY_DISABLE,
        .stop_bits = UART_STOP_BITS_1,
        .flow_ctrl = UART_HW_FLOWCTRL_DISABLE,
        .source_clk = UART_SCLK_APB,
    };

    // Install UART driver and configure UART1
    uart_driver_install(UART_NUM, BUF_SIZE * 2, BUF_SIZE * 2, 0, NULL, 0);
    uart_param_config(UART_NUM, &uart_config);
    uart_set_pin(UART_NUM, TXD_PIN, RXD_PIN, UART_PIN_NO_CHANGE, UART_PIN_NO_CHANGE);
}

void send_mqtt_command(const char *command)
{
    printf("Sending: %s\n", command);
    uart_write_bytes(UART_NUM, command, strlen(command));
    vTaskDelay(1000 / portTICK_PERIOD_MS);

    // Read the response from the SIMCom module
    uint8_t data[BUF_SIZE];
    int length = uart_read_bytes(UART_NUM, data, BUF_SIZE - 1, 100 / portTICK_PERIOD_MS);
    if (length > 0)
    {
        data[length] = '\0'; // Null-terminate the string
        printf("Response: %s\n", (char *)data);
    }
    else
    {
        printf("No response received.\n");
    }
}

void mqtt_task()
{
    // Send MQTT initialization commands step by step
    send_mqtt_command("AT\r\n");
    send_mqtt_command("AT+CFUN=1\r\n");
    send_mqtt_command("AT+CREG=2\r\n");
    send_mqtt_command("AT+CEREG=2\r\n");
    send_mqtt_command("AT+COPS?\r\n");
    send_mqtt_command("AT+CGATT=1\r\n");
    send_mqtt_command("AT+CGDCONT=1,\"IP\",\"airtelgprs.com\"\r\n");
    send_mqtt_command("AT+CGACT=1,1\r\n");
    send_mqtt_command("AT+CNTP=\"asia.pool.ntp.org\",0\r\n");
    send_mqtt_command("AT+CNTP\r\n");
    send_mqtt_command("AT+CGACT=1,1\r\n");
    send_mqtt_command("AT+CCLK?\r\n");
    send_mqtt_command("AT+CIFSR\r\n");
    send_mqtt_command("AT+CIPSTART\r\n");
    send_mqtt_command("AT+CSSLCFG=\"sslversion\",0,4\r\n");
    send_mqtt_command("AT+CSSLCFG=\"authmode\",0,2\r\n");
    send_mqtt_command("AT+CSSLCFG=\"cacert\",0,\"ca_cert.pem\"\r\n");
    send_mqtt_command("AT+CSSLCFG=\"clientcert\",0,\"client_cert.pem\"\r\n");
    send_mqtt_command("AT+CSSLCFG=\"clientkey\",0,\"client_key.pem\"\r\n");
    send_mqtt_command("AT+CSSLCFG=\"password\",0,\"password.pem\"\r\n");
    send_mqtt_command("AT+CSSLCFG=\"enableSNI\",0,1\r\n");
    send_mqtt_command("AT+CMQTTSSLCFG=0,0\r\n");    
    send_mqtt_command("AT+CSSLCFG=0\r\n");
    send_mqtt_command("AT+CGACT=1,CID\r\n");    
    vTaskDelay(1000 / portTICK_PERIOD_MS);
    send_mqtt_command("AT+CMQTTSTART\r\n"); // Start MQTT service
    vTaskDelay(2000 / portTICK_PERIOD_MS);
    send_mqtt_command("AT+CMQTTACCQ=0,\"s58p8l\",1\r\n"); // Set client ID
    vTaskDelay(2000 / portTICK_PERIOD_MS);
    send_mqtt_command("AT+CMQTTCONNECT=0,\"tcp://61f18205d9d64ad1b29f6e99d0679efc.s1.eu.hivemq.cloud:8883\",60,1,\"demo1\",\"Demo1234\"\r\n"); // Connect to broker
    vTaskDelay(3000 / portTICK_PERIOD_MS);
    send_mqtt_command("AT+CMQTTTOPIC=0,10\r\n"); // Specify topic length (adjust as needed)
    vTaskDelay(1000 / portTICK_PERIOD_MS);
    send_mqtt_command("AT+CIPSEND\r\n");
    send_mqtt_command(mqtt_topic);              // Send the topic string
    vTaskDelay(1000 / portTICK_PERIOD_MS);
    send_mqtt_command("AT+CMQTTPAYLOAD=0,17\r\n"); // Specify payload length (adjust as needed)
    send_mqtt_command(mqtt_message);             // Send the message
    send_mqtt_command("AT+CMQTTPUB=0,1,60\r\n"); // Publish the message

    // Stop the MQTT service after publishing
    send_mqtt_command("AT+CMQTTDISC=0,60\r\n"); // Disconnect from broker
    send_mqtt_command("AT+CMQTTREL=0\r\n");     // Release MQTT client
    send_mqtt_command("AT+CMQTTSTOP\r\n");
    send_mqtt_command("AT+CIPCLOSE\r\n");
    send_mqtt_command("AT+CGACT=0\r\n");      // Stop MQTT service
}

void app_main()
{
    // Initialize UART1
    uart_init();
    mqtt_task();
    // Create a task to handle MQTT communication
    // xTaskCreate(mqtt_task, "mqtt_task", 4096, NULL, 5, NULL);
}
